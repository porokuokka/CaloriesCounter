<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="100gInc.Text" xml:space="preserve">
    <value>100 grams of product includes</value>
  </data>
  <data name="Add.Content" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="AddingSuccess" xml:space="preserve">
    <value>Adding succeeded!</value>
  </data>
  <data name="AddToDiary.Text" xml:space="preserve">
    <value>Add to diary</value>
  </data>
  <data name="AddToDiaryButton.Content" xml:space="preserve">
    <value>Add to diary</value>
  </data>
  <data name="ApplicationName.Text" xml:space="preserve">
    <value>Calorie Counter!</value>
  </data>
  <data name="Carbohydrates.Text" xml:space="preserve">
    <value>Carbohydrates</value>
  </data>
  <data name="Create.Text" xml:space="preserve">
    <value>Create new ingredient</value>
  </data>
  <data name="CreateNew.Text" xml:space="preserve">
    <value>Create new ingredient</value>
  </data>
  <data name="CreateNewHelp.Text" xml:space="preserve">
    <value>On create new page you can add a new ingredient. Fill in the boxes and name the ingredient so that you can find it easily with searchcriteria. When the ingredient is added you can find it on search page and add it to your diary.</value>
  </data>
  <data name="Diary.Text" xml:space="preserve">
    <value>Diary</value>
  </data>
  <data name="DiaryHelp.Text" xml:space="preserve">
    <value>In diary you can browse the ingredients and nutritionfacts per day. On search-page you can add ingredients to the selected day. Diary is personal and cannot be viewed but users of the same device.</value>
  </data>
  <data name="Fat.Text" xml:space="preserve">
    <value>Fat</value>
  </data>
  <data name="Fibre.Text" xml:space="preserve">
    <value>Fibre</value>
  </data>
  <data name="Home.Text" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="HttpError" xml:space="preserve">
    <value>Oops! For some reason we are unable to connect to internet. Please check your internet connection and try again!</value>
  </data>
  <data name="ItemName.Text" xml:space="preserve">
    <value>Ingredients name</value>
  </data>
  <data name="Jar" xml:space="preserve">
    <value>Jar</value>
  </data>
  <data name="Jar.Text" xml:space="preserve">
    <value>Jar</value>
  </data>
  <data name="Piece" xml:space="preserve">
    <value>Piece</value>
  </data>
  <data name="Piece.Text" xml:space="preserve">
    <value>Pcs</value>
  </data>
  <data name="Portion.Text" xml:space="preserve">
    <value>Portion</value>
  </data>
  <data name="Protein.Text" xml:space="preserve">
    <value>Protein</value>
  </data>
  <data name="Search.Text" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="SearchCriteria.Text" xml:space="preserve">
    <value>Enter your search criteria here</value>
  </data>
  <data name="SearchError.Text" xml:space="preserve">
    <value>Oops! Nothing could be found with submitted search criteria. Please try again with shorter criteria or add a new ingredient</value>
  </data>
  <data name="SearchHelp.Text" xml:space="preserve">
    <value>On search page you can search for ingrediens and add them to the selected day. Ingredients are added to a cloud service so they can be used by other users of the app too.</value>
  </data>
  <data name="Tblsp" xml:space="preserve">
    <value>Tblsp</value>
  </data>
  <data name="Tblsp.Text" xml:space="preserve">
    <value>Tblsp</value>
  </data>
  <data name="TextBoxSearch.Text" xml:space="preserve">
    <value />
  </data>
  <data name="Tsp" xml:space="preserve">
    <value>Tsp</value>
  </data>
  <data name="Tsp.Text" xml:space="preserve">
    <value>Tsp</value>
  </data>
  <data name="Weights.Text" xml:space="preserve">
    <value>weights</value>
  </data>
  <data name="Welcome.Text" xml:space="preserve">
    <value>This app was developed to help keeping a food diary. To stand out from collections of thousands of other similar apps, CalorieCounter! has left out recommendations of losing weight and focused on simple arithmetics of calorie counting. This makes the app applicaple for both needs of losing and gaining weight. CalorieCounter! adds up the calories of a day and saves them into a database where you can easily browse your diary. On diary-page you can also see the nutrition facts of the intake energy per day. CalorieCounter! makes it easy to add new ingredients into a cloud service so you don't have to tie yourself to using an insufficient database.</value>
  </data>
  <data name="WelcomeHeader.Text" xml:space="preserve">
    <value>Welcome to CalorieCounter!</value>
  </data>
  <data name="DayOverview.Text" xml:space="preserve">
    <value>Days intake overview</value>
  </data>
  <data name="Delete.Content" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="AddingError" xml:space="preserve">
    <value>Adding was not a success for some reason. Please be patient and try again. Restarting the app might help.</value>
  </data>
</root>